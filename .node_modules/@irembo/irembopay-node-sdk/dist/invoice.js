"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Invoice = void 0;
const base_1 = require("./base");
class Invoice extends base_1.Base {
    createInvoice(data) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const response = yield this.axiosInstance.post("/invoices", data);
                return response.data;
            }
            catch (error) {
                this.handleError(error);
            }
        });
    }
    createBatchInvoice(data) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const response = yield this.axiosInstance.post("/invoices/batch", data);
                return response.data;
            }
            catch (error) {
                this.handleError(error);
            }
        });
    }
    getInvoice(invoiceReference) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const response = yield this.axiosInstance.get(`/invoices/${invoiceReference}`);
                return response.data;
            }
            catch (error) {
                this.handleError(error);
            }
        });
    }
    updateInvoice(invoiceReference, data) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const response = yield this.axiosInstance.put(`/invoices/${invoiceReference}`, data);
                return response.data;
            }
            catch (error) {
                this.handleError(error);
            }
        });
    }
}
exports.Invoice = Invoice;
